---
import Icon from '@/components/Elements/Icon.astro';

interface Props {
  headline: string;
  description: string;
  cta: string;
  shape?: 'circle' | 'square' | 'triangle';
  color?: ColorTypes;
  class?: string;
}

const hasSlotDefault = !!Astro.slots.default;
const {
  headline,
  description,
  cta,
  shape,
  color,
  class: className,
  ...props
} = Astro.props as Props;

const colors = {
  yellow: 'text-yellow',
  green: 'text-green',
  blue: 'text-blue',
};

const colorShape = colors[color as keyof typeof colors] ?? '';
const classes = ['card-service-hero', className];
---

<script>
  import { getRandomBetween } from '@/utils/helpers';

  const perspective = '1000px';
  const delta = 90;
  const cards = [
    ...document.querySelectorAll('[data-js="card-service-hero"]'),
  ] as HTMLElement[];

  cards.forEach(card => {
    const inner = card.firstElementChild as HTMLElement;
    const { width, height } = card.getBoundingClientRect();
    const midWidth = width / 2;
    const midHeight = height / 2;

    card.addEventListener('mousemove', e => {
      const cursPosX = e.pageX - card.offsetLeft;
      const cursPosY = e.pageY - card.offsetTop;
      const cursCenterX = midWidth - cursPosX;
      const cursCenterY = midHeight - cursPosY;

      // Used for glow.
      card.style.setProperty('--x', `${cursPosX}px`);
      card.style.setProperty('--y', `${cursPosY}px`);

      // Used for tilt and skew.
      inner.style.transform = `perspective(${perspective}) rotateX(${cursCenterY / delta}deg) rotateY(${-cursCenterX / delta}deg)`;
      inner.classList.remove('transition-transform');
    });

    card.addEventListener('mouseleave', () => {
      inner.style.transform = `perspective(${perspective}) rotateX(0deg) rotateY(0deg)`;
      inner.classList.add('transition-transform');
    });

    const shape = card.querySelector(
      '[data-js="card-service-hero-shape"]',
    ) as HTMLElement;

    if (card && shape) {
      const shapeRect = shape.getBoundingClientRect();
      const shapeWidth = shapeRect.width;
      const shapeHeight = shapeRect.height;
      const give = shapeWidth / 2;

      let posX = getRandomBetween(width / 2, width - shapeWidth);
      let posY = getRandomBetween(0, height / 2);
      let speedX = Math.random() >= 0.5 ? 0.1 : -0.1;
      let speedY = Math.random() >= 0.5 ? 0.1 : -0.1;

      function animate() {
        posX += speedX;
        posY += speedY;

        if (posX <= -give || posX + shapeWidth / 2 >= width) {
          speedX *= -1;
        }
        if (posY <= -give || posY + shapeHeight / 2 >= height) {
          speedY *= -1;
        }

        shape.style.transform = `translate(${posX}px, ${posY}px)`;

        requestAnimationFrame(animate);
      }

      animate();
    }
  });
</script>

<style>
  .card-service-hero {
    &__content {
      box-shadow:
        0px 0px 100px var(--yellowball-navy) inset,
        20px 20px 50px var(--yellowball-card) inset;
    }

    &__link,
    &__inner {
      &::before {
        opacity: 0;
        content: '';
        position: absolute;
        top: var(--y);
        left: var(--x);
        z-index: 1;
        width: 150%;
        aspect-ratio: 1;
        pointer-events: none;
        transition: opacity 0.3s ease;
        transform: translate3d(-50%, -50%, 0);
        background-image: radial-gradient(
          var(--color),
          transparent,
          transparent
        );
      }
    }

    &__link {
      &:hover {
        &::before {
          opacity: 1;
        }

        .card-service-hero__inner {
          &::before {
            opacity: 0.2;
          }
        }
      }
    }
  }
</style>

<div
  data-js="card-service-hero"
  class:list={classes}
  style={`--color: var(--yellowball-${color})`}
  {...props}
>
  <div
    class="w-full h-full text-left transform-style-3d backface-hidden rotate-x-0 rotate-y-0 will-change-transform transition-transform duration-300 ease-out overflow-hidden rounded-30 lg:rounded-40 outline-1 outline-solid outline-transparent"
  >
    <a
      href="/"
      class="card-service-hero__link group w-full h-full block rounded-30 lg:rounded-40 bg-white/10 p-1"
    >
      <div
        class="card-service-hero__inner relative z-10 w-full h-full rounded-30 lg:rounded-40 bg-card overflow-hidden"
      >
        {
          shape && (
            <Icon
              data-js="card-service-hero-shape"
              name={`shape-${shape}`}
              class="absolute top-0 left-0 z-0 w-80 lg:w-160 text-white opacity-10 pointer-events-none"
            />
          )
        }

        <div
          class="card-service-hero__content rounded-30 lg:rounded-40 relative z-20 w-full h-full p-30 lg:p-60 grid grid-cols-1 gap-30 lg:gap-40 lg:grid-cols-[1fr_53%]"
        >
          <div class="flex flex-col justify-start items-start gap-30 lg:gap-40">
            <div class="flex items-end justify-start gap-20">
              <h3
                class="font-heading font-semibold text-40 lg:text-64 text-balance"
              >
                {headline}
              </h3>

              {
                shape && colorShape && (
                  <Icon
                    name={`shape-${shape}`}
                    class:list={[colorShape, 'w-20 mb-5']}
                  />
                )
              }
            </div>

            <p class="font-normal text-18 lg:text-21 text-grey text-balance">
              {description}
            </p>

            <button
              type="button"
              class="font-heading font-bold text-15 lg:text-18 text-white text-balance mt-auto flex items-baseline justify-start gap-20"
            >
              {cta}
              <Icon name="arrow-s" class="size-12 md:size-14" />
            </button>
          </div>

          <div>
            {
              hasSlotDefault && (
                <div class="w-full shadow-media">
                  <slot />
                </div>
              )
            }
          </div>
        </div>
      </div>
    </a>
  </div>
</div>
