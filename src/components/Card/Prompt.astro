---
import { colourText } from '@/utils/maps';
import Icon from '@/components/Elements/Icon.astro';

interface Props {
  shape: ShapeTypes;
  color: ColorTypes;
  hasArrow?: boolean;
  mini?: boolean;
  class?: string;
}

const {
  shape,
  color,
  hasArrow = false,
  mini = false,
  class: className,
  ...rest
} = Astro.props as Props;

const colorShape = colourText[color as keyof typeof colourText] ?? '';
---

<script>
  import gsap from 'gsap';
  import { ScrollTrigger } from 'gsap/dist/ScrollTrigger';

  gsap.registerPlugin(ScrollTrigger);

  const cards = document.querySelectorAll(
    '[data-js="card-prompt"]',
  ) as NodeListOf<HTMLElement>;

  cards.forEach(card => {
    const shape = card.querySelector('[data-js-shape]') as HTMLElement;

    if (shape) {
      const { height: cardHeight } = card.getBoundingClientRect();
      const { height: shapeHeight } = shape.getBoundingClientRect();

      gsap.to(shape, {
        y: `-${cardHeight - shapeHeight / 2}`,
        scrollTrigger: {
          markers: false,
          trigger: card,
          scrub: 1,
          start: 'top bottom',
          end: 'bottom top',
        },
      });
    }
  });
</script>

<div
  data-js="card-prompt"
  class:list={[
    'w-full text-white light:text-navy bg-navy-light light:bg-white border border-white/10 light:border-navy/15 text-left',
    mini ? 'rounded-30' : 'rounded-40 lg:rounded-80',
    className,
  ]}
  {...rest}
>
  <a
    href="/"
    class:list={[
      'group relative w-full h-full grid grid-cols-1 overflow-hidden',
      mini
        ? 'rounded-30 p-40'
        : `rounded-40 lg:rounded-80 p-30 lg:p-80 lgMax:grid-rows-[100px_1fr] lgMax:before:content-['']`,
    ]}
  >
    <div class="z-10 flex flex-col justify-start items-start gap-30 lg:gap-60">
      {Astro.slots.headline && <slot name="headline" />}
      {Astro.slots.button && <slot name="button" />}
    </div>

    {
      shape && colorShape && (
        <Icon
          data-js-shape
          name={`shape-${shape}`}
          class:list={[
            colorShape,
            mini ? 'size-180' : 'size-280 lg:size-400',
            'absolute bottom-0 right-0 z-0 translate-x-1/3 translate-y-1/2 pointer-events-none',
          ]}
        />
      )
    }

    {
      hasArrow && (
        <Icon
          name="arrow-ne"
          class="absolute top-30 right-30 z-0 size-12 transform-gpu transition-transform duration-250 ease-smooth group-hover:translate-x-1/2 group-hover:-translate-y-1/2"
        />
      )
    }
  </a>
</div>
