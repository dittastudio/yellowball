---
import { colourText } from '@/utils/maps';
import { Icon } from 'astro-icon/components';

interface Props {
  headline: string;
  description: string;
  shape?: ShapeTypes;
  color?: ColorTypes;
  class?: string;
}

const hasSlotDefault = !!Astro.slots.default;
const {
  headline,
  description,
  shape,
  color,
  class: className,
  ...rest
} = Astro.props as Props;

const colorShape = colourText[color as keyof typeof colourText] ?? '';
const classes = ['card-service', className];
---

<script>
  import gsap from 'gsap';

  // TODO: Move to a separate class. Used in 2 files already.

  const perspective = '1000px';
  const delta = 50;
  const cards = [
    ...document.querySelectorAll('[data-js="card-service"]'),
  ] as HTMLElement[];

  cards.forEach(card => {
    const inner = card.firstElementChild as HTMLElement;
    const { width, height } = card.getBoundingClientRect();
    const midWidth = width / 2;
    const midHeight = height / 2;

    card.addEventListener('mousemove', e => {
      const cursPosX = e.pageX - card.offsetLeft;
      const cursPosY = e.pageY - card.offsetTop;
      const cursCenterX = midWidth - cursPosX;
      const cursCenterY = midHeight - cursPosY;

      // Used for glow.
      card.style.setProperty('--x', `${cursPosX}px`);
      card.style.setProperty('--y', `${cursPosY}px`);

      // Used for tilt and skew.
      inner.style.transform = `perspective(${perspective}) rotateX(${cursCenterY / delta}deg) rotateY(${-cursCenterX / delta}deg)`;
      inner.classList.remove('transition-transform');
    });

    card.addEventListener('mouseleave', () => {
      inner.style.transform = `perspective(${perspective}) rotateX(0deg) rotateY(0deg)`;
      inner.classList.add('transition-transform');
    });

    const shape = card.querySelector(
      '[data-js="card-service-shape"]',
    ) as HTMLElement;

    if (card && shape) {
      const shapeRect = shape.getBoundingClientRect();
      const shapeWidth = shapeRect.width;
      const shapeHeight = shapeRect.height;
      const give = shapeWidth / 2;

      let posX = gsap.utils.random(width / 2, width - shapeWidth);
      let posY = gsap.utils.random(0, height / 2);
      let speedX = Math.random() >= 0.5 ? 0.1 : -0.1;
      let speedY = Math.random() >= 0.5 ? 0.1 : -0.1;

      function animate() {
        posX += speedX;
        posY += speedY;

        if (posX <= -give || posX + shapeWidth / 2 >= width) {
          speedX *= -1;
        }
        if (posY <= -give || posY + shapeHeight / 2 >= height) {
          speedY *= -1;
        }

        shape.style.transform = `translate(${posX}px, ${posY}px)`;

        requestAnimationFrame(animate);
      }

      animate();
    }
  });
</script>

<div
  data-js="card-service"
  class:list={classes}
  style={`--color: var(--yellowball-${color})`}
  {...rest}
>
  <div
    class="w-full h-full text-left transform-style-3d backface-hidden rotate-x-0 rotate-y-0 will-change-transform transition-transform duration-300 ease-out overflow-hidden rounded-30 lg:rounded-40"
  >
    <a
      href="/"
      class="card-service__link group w-full h-full block rounded-30 lg:rounded-40 bg-white/10 p-1"
    >
      <div
        class="card-service__inner relative z-10 w-full h-full rounded-30 lg:rounded-40 bg-card overflow-hidden"
      >
        {
          shape && (
            <Icon
              data-js="card-service-shape"
              name={`shape-${shape}`}
              width={160}
              height={160}
              class="absolute top-0 left-0 z-0 text-white opacity-10 pointer-events-none"
            />
          )
        }

        <div
          class="card-service__content rounded-30 lg:rounded-40 relative z-20 w-full h-full p-30 lg:p-60 flex flex-col justify-start items-start gap-20 md:gap-30"
        >
          <div class="relative w-full flex justify-between items-start">
            <h4
              class="flex items-baseline font-heading text-32 lg:text-48 font-semibold text-balance"
            >
              {headline}&nbsp;{
                shape && colorShape && (
                  <Icon
                    name={`shape-${shape}`}
                    width={shape === 'triangle' ? 24 : 21}
                    height={21}
                    class:list={[colorShape, 'inline-block ml-5']}
                  />
                )
              }
            </h4>

            <Icon
              name="arrow-ne"
              class="size-10 md:size-12 group-hover:translate-x-2 group-hover:-translate-y-2 transition-transform duration-300"
            />
          </div>

          <p class="font-normal text-15 lg:text-18 text-grey text-balance">
            {description}
          </p>

          {
            hasSlotDefault && (
              <div class="w-full -mb-30 lg:-mb-60 mt-20 shadow-media">
                <slot />
              </div>
            )
          }
        </div>
      </div>
    </a>
  </div>
</div>

<style>
  .card-service {
    &__content {
      box-shadow:
        0px 0px 100px var(--yellowball-navy) inset,
        20px 20px 50px var(--yellowball-card) inset;
    }

    &__link,
    &__inner {
      &::before {
        opacity: 0;
        content: '';
        position: absolute;
        top: var(--y);
        left: var(--x);
        z-index: 1;
        width: 150%;
        aspect-ratio: 1;
        pointer-events: none;
        transition: opacity 0.3s ease;
        transform: translate3d(-50%, -50%, 0);
        background-image: radial-gradient(
          var(--color),
          transparent,
          transparent
        );
      }
    }

    &__link {
      &:hover {
        &::before {
          opacity: 1;
        }

        .card-service__inner {
          &::before {
            opacity: 0.2;
          }
        }
      }
    }
  }
</style>
