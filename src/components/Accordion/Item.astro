---
import { colourText } from '@/utils/maps';

interface Props {
  id: string;
  color?: ColorTypes;
  class?: string;
}

const { id, color = 'green', class: className } = Astro.props as Props;

const headerId = `accordion-item-header-${id}`;
const bodyId = `accordion-item-body-${id}`;

const hoverClasses = {
  green: 'group-hover/accordion:text-green',
  blue: 'group-hover/accordion:text-blue',
  yellow: 'group-hover/accordion:text-yellow',
  purple: 'group-hover/accordion:text-purple',
  navy: 'group-hover/accordion:text-navy',
};

const isOpenClasses = {
  green: '[.accordion-item.is-open_&]:text-green',
  blue: '[.accordion-item.is-open_&]:text-blue',
  yellow: '[.accordion-item.is-open_&]:text-yellow',
  purple: '[.accordion-item.is-open_&]:text-purple',
  navy: '[.accordion-item.is-open_&]:text-navy',
};
---

<script>
  import gsap from 'gsap';

  const accordions = document.querySelectorAll(
    '[data-js=accordion-item]',
  ) as NodeListOf<HTMLElement>;

  accordions.forEach(accordion => {
    const header = accordion.querySelector(
      '[data-js-accordion-header]',
    ) as HTMLElement;
    const body = accordion.querySelector(
      '[data-js-accordion-body]',
    ) as HTMLElement;
    const bodyInner = accordion.querySelector(
      '[data-js-accordion-body-inner]',
    ) as HTMLElement;

    const tl = gsap.timeline({ paused: true });

    const toggleAccordion = () => {
      const isOpen = accordion.classList.contains('is-open');

      tl.clear();

      if (isOpen) {
        tl.to(bodyInner, {
          opacity: 0,
          duration: 0.2,
          ease: 'power2.inOut',
        }).to(
          body,
          {
            height: 0,
            duration: 0.5,
            ease: 'power4.inOut',
          },
          '<',
        );

        accordion.classList.remove('is-open');
        body?.setAttribute('aria-label', 'Close Accordion');
        body?.setAttribute('aria-hidden', 'true');
      } else {
        tl.to(body, {
          height: 'auto',
          duration: 0.5,
          ease: 'power4.inOut',
          onComplete: () => {
            gsap.set(body, { height: 'auto' }); // Set to auto for flexible height
          },
        }).to(
          bodyInner,
          {
            opacity: 1,
            duration: 0.5,
            ease: 'power2.out',
          },
          '<50%',
        );

        accordion.classList.add('is-open');
        body?.setAttribute('aria-label', 'Open Accordion');
        body?.setAttribute('aria-hidden', 'false');
      }

      tl.play();
    };

    header.addEventListener('click', toggleAccordion);
  });
</script>

<section
  data-js="accordion-item"
  class:list={['accordion-item w-full text-fluid-h6', className]}
>
  <button
    data-js-accordion-header
    type="button"
    id={headerId}
    class:list={[
      'group/accordion flex items-baseline gap-28 md:gap-40 py-30 md:pt-40 md:pb-30 w-full',
      'font-heading font-semibold text-left',
      isOpenClasses[color as keyof typeof isOpenClasses],
    ]}
  >
    <span class:list={['accordion-item__icon', colourText[color]]}></span>

    {
      Astro.slots.header && (
        <span
          class:list={[
            'block transition-colors duration-250 ease-smooth',
            hoverClasses[color as keyof typeof hoverClasses],
          ]}
        >
          <slot name="header" />
        </span>
      )
    }
  </button>

  {
    Astro.slots.body && (
      <article
        data-js-accordion-body
        class="pl-[calc(var(--accordion-icon-size)_+_28px)] md:pl-[calc(var(--accordion-icon-size)_+_40px)] h-0 overflow-hidden"
        id={bodyId}
        role="region"
        aria-labelledby={headerId}
      >
        <div
          data-js-accordion-body-inner
          class="prose max-w-[850px] prose-p:text-18 prose-p:sm:text-21 prose-p:m-0 [&_p+p]:mt-[1em] pb-40 text-current opacity-0"
        >
          <div class="opacity-60">
            <slot name="body" />
          </div>
        </div>
      </article>
    )
  }
</section>

<style>
  .accordion-item {
    --accordion-icon-size: calc(16 / 20 * 1em);

    animation-name: caption-scroll-effect;
    animation-timing-function: theme('transitionTimingFunction.smooth');
    animation-fill-mode: both;
    animation-timeline: --caption-timeline;
    view-timeline-name: --caption-timeline;
    animation-range: entry 25% cover 25%;
  }

  @keyframes caption-scroll-effect {
    0% {
      translate: calc(-1 * theme('spacing.12')) 0 0;
      opacity: 0;
    }
  }

  .accordion-item__icon {
    position: relative;
    width: var(--accordion-icon-size);
    height: var(--accordion-icon-size);
    flex-shrink: 0;

    &::before,
    &::after {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      translate: -50% -50%;
      width: inherit;
      height: 2px;
      background-color: currentColor;
    }

    &::after {
      transform: rotate(90deg);
      animation: accordion-rotate-close 0.5s
        theme('transitionTimingFunction.inOutQuart') both;

      .accordion-item.is-open & {
        animation: accordion-rotate-open 0.5s
          theme('transitionTimingFunction.inOutQuart') both;
      }
    }
  }

  @keyframes accordion-rotate-open {
    0% {
      transform: rotate(90deg);
    }

    100% {
      transform: rotate(180deg);
    }
  }

  @keyframes accordion-rotate-close {
    0% {
      transform: rotate(180deg);
    }

    99.9% {
      transform: rotate(270deg);
    }

    100% {
      transform: rotate(90deg);
    }
  }
</style>
