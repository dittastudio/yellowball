---
import { colourText } from '@/utils/maps';

interface Props {
  color?: ColorTypes;
}

const { color = 'white' } = Astro.props as Props;

const hoverClasses = {
  white: '[a:hover_&]:bg-white',
  green: '[a:hover_&]:bg-green',
  blue: '[a:hover_&]:bg-blue',
  yellow: '[a:hover_&]:bg-yellow',
  purple: '[a:hover_&]:bg-purple',
};
---

<span
  class:list={[
    'cube-logo relative flex justify-center items-center size-40 md:size-50',
    'after:absolute after:inset-0',
    'after:border after:border-solid after:border-navy-lighter after:rounded-12',
    'bg-navy-light rounded-12',
    hoverClasses[color as keyof typeof hoverClasses],
    colourText[color],
  ]}
>
  <span class="relative size-22 md:size-28 [&_svg]:size-full">
    <span class="cube-logo__icon block size-full">
      <slot />
    </span>

    {
      Astro.slots.hover && (
        <span class="cube-logo__hover absolute inset-0 size-inherit">
          <slot name="hover" />
        </span>
      )
    }
  </span>
</span>

<style>
  .cube-logo {
    --ease: theme('transitionTimingFunction.smooth');

    transition:
      background-color 0.3s var(--ease),
      color 0.3s var(--ease);
  }

  .cube-logo__icon {
    opacity: 1;
    transition: opacity 0.3s var(--ease);

    @media (hover: hover) {
      :global(a):hover & {
        opacity: 0;
      }
    }
  }

  .cube-logo__hover {
    opacity: 0;
    transition: opacity 0.3s var(--ease);

    @media (hover: hover) {
      :global(a):hover & {
        opacity: 1;
      }
    }
  }
</style>
