---
// interface Props {
//   tag?: string;
// }

import type { HTMLAttributes } from 'astro/types';

interface Reveal {
  tag?: string;
}

type Props = HTMLAttributes<'div'> & Reveal;

const { tag = 'div', ...rest } = Astro.props as Props;
const Element = tag;
---

<script>
  import { gsap } from 'gsap';
  import SplitType from 'split-type';
  import { debounce } from '@/utils/helpers';

  const textReveal = document.querySelectorAll(
    "[data-js='text-reveal']",
  ) as NodeListOf<HTMLElement>;

  textReveal.forEach(reveal => {
    let masks: SplitType;
    let lines: SplitType;
    let tween: gsap.core.Tween;

    const create = () => {
      masks = new SplitType(reveal, {
        types: 'lines',
        lineClass: 'mask',
        tagName: 'span',
      });

      gsap.set(masks.lines, {
        clipPath: `polygon(0 0, 100% 0, 100% 105%, 0% 105%)`,
      });

      const maskElements = reveal.querySelectorAll(
        ':scope .mask',
      ) as NodeListOf<HTMLElement>;

      lines = new SplitType(maskElements, {
        types: 'lines',
        tagName: 'span',
      });

      tween = gsap.fromTo(
        lines.lines,
        { yPercent: 100 },
        {
          duration: 1,
          yPercent: 0,
          ease: 'power4.out',
          stagger: 0.05,
          scrollTrigger: {
            markers: false,
            scrub: 1.5,
            trigger: reveal,
            start: '20% 80%',
            end: 'bottom center',
          },
        },
      );
    };

    create();

    let currentWidth = Math.round(reveal.getBoundingClientRect().width);

    const handleResize = debounce(() => {
      const { width } = reveal.getBoundingClientRect();
      const newWidth = Math.round(width);

      if (currentWidth === newWidth) return;

      currentWidth = newWidth;

      tween.kill();
      masks.revert();
      lines.revert();

      create();
    }, 500);

    window.addEventListener('resize', handleResize);
  });
</script>

<Element data-js="text-reveal" {...rest}>
  <slot />
</Element>
