---
interface Props {
  hasExit?: boolean | null;
}

const { hasExit = null } = Astro.props as Props;
---

<script>
  import gsap from 'gsap';
  import { ScrollTrigger } from 'gsap/dist/ScrollTrigger';

  gsap.registerPlugin(ScrollTrigger);

  const sections = document.querySelectorAll(
    '[data-js="cursors"]',
  ) as NodeListOf<HTMLElement>;

  sections.forEach(section => {
    const cursors = section.querySelectorAll(
      ':scope > *',
    ) as NodeListOf<HTMLElement>;
    const timelines: gsap.core.Timeline[] = [];
    const getRandomDuration = () => gsap.utils.random(1, 2);
    let canMoveX = true;

    const createTimeline = (cursor: HTMLElement) => {
      const timeline = gsap.timeline({
        repeat: -1,
        // yoyo: false
      });

      const animate = () => {
        const duration = getRandomDuration();
        // const distance = gsap.utils.random(50, 100);

        timeline.clear();

        timeline
          .to(cursor, {
            duration,
            y: -50,
            ease: 'sine.inOut',
            // onComplete: animate,
          })
          .to(cursor, {
            duration,
            y: 0,
            ease: 'sine.inOut',
          });
      };

      animate();

      return timeline;
    };

    const handleMouseMove = (e: MouseEvent) => {
      if (!canMoveX) return;

      const mouseX = e.clientX;
      const mouseY = e.clientY;

      const percentages = {
        x: mouseX / window.innerWidth,
        y: mouseY / window.innerHeight,
      };

      const rangeX = gsap.utils.mapRange(0, 1, -100, 100, percentages.x);

      cursors.forEach(cursor => {
        gsap.to(cursor, {
          x: `${rangeX}px`,
          duration: 1,
          ease: 'sine.out',
        });
      });
    };

    document.addEventListener('mousemove', handleMouseMove);

    const run = () => {
      cursors.forEach(cursor => {
        const timeline = createTimeline(cursor);
        timelines.push(timeline);
      });

      if (section.hasAttribute('data-js-exit')) {
        let isPlaying = true;
        let delayedCall: gsap.core.Tween | null = null;

        const clearDelay = () => {
          delayedCall?.kill();
          delayedCall = null;
        };

        gsap
          .timeline({
            scrollTrigger: {
              markers: false,
              trigger: section,
              start: '5% top',
              end: '110% top',
              scrub: 1.5,
              invalidateOnRefresh: true,
              onEnter: () => {
                canMoveX = false;

                if (isPlaying) {
                  timelines.forEach(timeline => timeline.pause());
                  isPlaying = false;
                }
              },
              onLeaveBack: () => {
                clearDelay();

                if (!isPlaying) {
                  delayedCall = gsap.delayedCall(2.5, () => {
                    ScrollTrigger.refresh();
                    timelines.forEach(timeline => timeline.play());
                    isPlaying = true;
                    canMoveX = true;
                  });
                }
              },
            },
          })
          .to(cursors, {
            x: (_index, target) => {
              const targetRect = target.getBoundingClientRect();
              const sectionRect = section.getBoundingClientRect();
              const offset = sectionRect.x - (targetRect.x - sectionRect.x);

              return sectionRect.width / 2 - (targetRect.width - offset);
            },
            y: (_index, target) => {
              const targetRect = target.getBoundingClientRect();
              const sectionRect = section.getBoundingClientRect();
              const offset = sectionRect.y - (targetRect.y - sectionRect.y);

              return (
                sectionRect.top +
                sectionRect.height * 1.5 -
                (targetRect.height - offset)
              );
            },
          })
          .to(cursors, {
            scale: 0,
            opacity: 0,
          });
      }
    };

    if (section && cursors.length) {
      run();
    }
  });
</script>

<div
  data-js="cursors"
  data-js-exit={hasExit}
  class="absolute inset-0 z-10 pointer-events-none"
>
  <slot />
</div>
