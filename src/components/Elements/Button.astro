---
import { colourText, colourBackground } from '@/utils/maps';
import Icon from '@/components/Elements/Icon.astro';

interface Props {
  class?: string;
  options?: {
    textColor?: string;
    bgColor?: string;
    borderColor?: string;
  };
  optionsHover?: {
    textColor?: string;
    bgColor?: string;
    borderColor?: string;
  };
  text: string;
  hasArrow?: boolean;
}

const {
  class: className,
  text,
  options = {
    textColor: 'navy',
    bgColor: 'white',
    borderColor: 'transparent',
  },
  optionsHover = {
    textColor: 'navy',
    bgColor: 'yellow',
    borderColor: 'transparent',
  },
  hasArrow = false,
} = Astro.props as Props;

const colourBorder: Record<string, string> = {
  current: 'before:border-current',
  transparent: 'before:border-transparent',
  black: 'before:border-black',
  white: 'before:border-white',
  yellow: 'before:border-yellow',
  green: 'before:border-green',
  blue: 'before:border-blue',
  purple: 'before:border-purple',
  navy: 'before:border-navy',
  'navy-light': 'before:border-navy-light',
  'navy-lighter': 'before:border-navy-lighter',
  cream: 'before:border-cream',
  grey: 'before:border-grey',
} as const;

const colourTextHover: Record<string, string> = {
  current: '[:is(a:hover,_button:hover)_&]:text-current',
  transparent: '[:is(a:hover,_button:hover)_&]:text-transparent',
  black: '[:is(a:hover,_button:hover)_&]:text-black',
  white: '[:is(a:hover,_button:hover)_&]:text-white',
  yellow: '[:is(a:hover,_button:hover)_&]:text-yellow',
  green: '[:is(a:hover,_button:hover)_&]:text-green',
  blue: '[:is(a:hover,_button:hover)_&]:text-blue',
  purple: '[:is(a:hover,_button:hover)_&]:text-purple',
  navy: '[:is(a:hover,_button:hover)_&]:text-navy',
  'navy-light': '[:is(a:hover,_button:hover)_&]:text-navy-light',
  'navy-lighter': '[:is(a:hover,_button:hover)_&]:text-navy-lighter',
  cream: '[:is(a:hover,_button:hover)_&]:text-cream',
  grey: '[:is(a:hover,_button:hover)_&]:text-grey',
} as const;

const colourBackgroundHover: Record<string, string> = {
  current: '[:is(a:hover,_button:hover)_&]:bg-current',
  transparent: '[:is(a:hover,_button:hover)_&]:bg-transparent',
  black: '[:is(a:hover,_button:hover)_&]:bg-black',
  white: '[:is(a:hover,_button:hover)_&]:bg-white',
  yellow: '[:is(a:hover,_button:hover)_&]:bg-yellow',
  green: '[:is(a:hover,_button:hover)_&]:bg-green',
  blue: '[:is(a:hover,_button:hover)_&]:bg-blue',
  purple: '[:is(a:hover,_button:hover)_&]:bg-purple',
  navy: '[:is(a:hover,_button:hover)_&]:bg-navy',
  'navy-light': '[:is(a:hover,_button:hover)_&]:bg-navy-light',
  'navy-lighter': '[:is(a:hover,_button:hover)_&]:bg-navy-lighter',
  cream: '[:is(a:hover,_button:hover)_&]:bg-cream',
  grey: '[:is(a:hover,_button:hover)_&]:bg-grey',
} as const;

const colourBorderHover: Record<string, string> = {
  current: '[:is(a:hover,_button:hover)_&]:before:border-current',
  transparent: '[:is(a:hover,_button:hover)_&]:before:border-transparent',
  black: '[:is(a:hover,_button:hover)_&]:before:border-black',
  white: '[:is(a:hover,_button:hover)_&]:before:border-white',
  yellow: '[:is(a:hover,_button:hover)_&]:before:border-yellow',
  green: '[:is(a:hover,_button:hover)_&]:before:border-green',
  blue: '[:is(a:hover,_button:hover)_&]:before:border-blue',
  purple: '[:is(a:hover,_button:hover)_&]:before:border-purple',
  navy: '[:is(a:hover,_button:hover)_&]:before:border-navy',
  'navy-light': '[:is(a:hover,_button:hover)_&]:before:border-navy-light',
  'navy-lighter': '[:is(a:hover,_button:hover)_&]:before:border-navy-lighter',
  cream: '[:is(a:hover,_button:hover)_&]:before:border-cream',
  grey: '[:is(a:hover,_button:hover)_&]:before:border-grey',
} as const;

const optionsProps = {
  textColor: 'navy',
  bgColor: 'white',
  borderColor: 'transparent',
  ...options,
};

const optionsHoverProps = {
  textColor: 'navy',
  bgColor: 'yellow',
  borderColor: 'transparent',
  ...optionsHover,
};

const classesTextColor = colourText[optionsProps.textColor];
const classesBgColor = colourBackground[optionsProps.bgColor];
const classesBorderColor = colourBorder[optionsProps.borderColor];

const classesTextColorHover = colourTextHover[optionsHoverProps.textColor];
const classesBgColorHover = colourBackgroundHover[optionsHoverProps.bgColor];
const classesBorderColorHover =
  colourBorderHover[optionsHoverProps.borderColor];
---

<span
  class:list={[
    'relative inline-flex justify-center items-center gap-8 md:gap-12',
    'px-[36px] py-[1em]',
    'rounded-20 transition-colors duration-250 ease-smooth',
    'font-heading font-bold leading-[1.467] md:leading-[1.2223] text-15 md:text-18',
    'before:absolute before:inset-0 before:border before:border-solid before:rounded-[inherit] before:transition-colors before:duration-250 before:ease-smooth',
    'after:absolute after:inset-0 after:opacity-0 after:rounded-[inherit] after:transition-opacity after:duration-250 after:ease-smooth after:bg-navy',
    '[a:active_&]:after:opacity-10 [button:active_&]:after:opacity-10',
    classesTextColor,
    classesBgColor,
    classesBorderColor,
    classesTextColorHover,
    classesBgColorHover,
    classesBorderColorHover,
    className,
  ]}
>
  {text}

  {
    hasArrow && (
      <Icon
        name="arrow-ne"
        class="relative top-[0.05em] size-[0.6em] transform-gpu transition-transform duration-250 ease-smooth [a:hover_&]:translate-x-1/2 [a:hover_&]:-translate-y-1/2 [button:hover_&]:translate-x-1/2 [button:hover_&]:-translate-y-1/2"
      />
    )
  }
</span>
