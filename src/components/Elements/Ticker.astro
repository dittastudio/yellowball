---
// import Icon from '@/components/Elements/Icon.astro'

interface Props {
  class?: string
}

const { class: className } = Astro.props as Props
---

<script>
  const tickers = [
    ...document.querySelectorAll('[data-js=ticker]'),
  ] as HTMLElement[]

  tickers.forEach(ticker => {
    // blah blah
    console.log(ticker)

    class LoopingElement {
      element: HTMLElement
      currentTranslation: number
      speed: number
      direction: boolean
      scrollTop: number
      metric: number
      lerp: { current: number; target: number; factor: number }

      constructor(element: any, currentTranslation: any, speed: any) {
        this.element = element
        this.currentTranslation = currentTranslation
        this.speed = speed
        this.direction = true
        this.scrollTop = 0
        this.metric = 100

        this.lerp = {
          current: this.currentTranslation,
          target: this.currentTranslation,
          factor: 0.05,
        }

        this.events()
        this.render()
      }

      events() {
        window.addEventListener('scroll', () => {
          let direction = window.scrollY || document.documentElement.scrollTop
          if (direction > this.scrollTop) {
            this.direction = true
            this.lerp.target += this.speed * 8
          } else {
            this.direction = false
            this.lerp.target -= this.speed * 8
          }
          this.scrollTop = direction <= 0 ? 0 : direction
        })
      }

      lerpFunc(current: number, target: number, factor: number) {
        this.lerp.current = current * (1 - factor) + target * factor
      }

      goForward() {
        this.lerp.target += this.speed
        if (this.lerp.target > this.metric) {
          this.lerp.current -= this.metric * 1
          this.lerp.target -= this.metric * 1
        }
      }

      goBackward() {
        this.lerp.target -= this.speed
        if (this.lerp.target < -this.metric) {
          this.lerp.current -= -this.metric * 1
          this.lerp.target -= -this.metric * 1
        }
      }

      animate() {
        this.direction ? this.goForward() : this.goBackward()
        this.lerpFunc(this.lerp.current, this.lerp.target, this.lerp.factor)

        this.element.style.transform = `translateX(${this.lerp.current}%)`
      }

      render() {
        this.animate()
        window.requestAnimationFrame(() => this.render())
      }
    }

    let elements = document.querySelectorAll('.element-ticker__list')

    new LoopingElement(elements[0], 0, 0.05)
    // new LoopingElement(elements[1], 0, 0.08)
  })
</script>

<div data-js="ticker" class:list={['element-ticker contain-layout', className]}>
  <ul
    class="element-ticker__list select-none flex justify-center min-w-full font-heading text-fluid-h1 font-semibold"
  >
    <li
      class="element-ticker__item flex shrink-0 gap-[var(--gap)] items-center justify-around min-w-full px-[0.25em]"
    >
      <p>this is a longer title 1</p>

      <p>this is a longer title 2</p>

      <p>this is a longer title 3</p>
    </li>

    <li
      class="element-ticker__item flex shrink-0 gap-[var(--gap)] items-center justify-around min-w-full px-[0.25em]"
    >
      <p>this is a longer title 1</p>

      <p>this is a longer title 2</p>

      <p>this is a longer title 3</p>
    </li>

    <li
      class="element-ticker__item flex shrink-0 gap-[var(--gap)] items-center justify-around min-w-full px-[0.25em]"
    >
      <p>this is a longer title 1</p>

      <p>this is a longer title 2</p>

      <p>this is a longer title 3</p>
    </li>
  </ul>
</div>

<style>
  .element-ticker {
    --gap: 0.5em;
  }

  .element-ticker__list {
  }

  .element-ticker__item {
  }
</style>
