---
export interface Props {
  textList?: string[];
}

const { textList = [] } = Astro.props as Props;
const textListString = textList.join(',');
---

<span
  data-js="typing"
  class="typing-text flex items-center overflow-hidden"
  id="typing-container"
  data-js-typing-list={textListString}
>
  <p
    data-js-typing-input
    class="overflow-hidden text-ellipsis whitespace-nowrap"
    id="typing-text"
  >
  </p>

  <i class="typing-text__caret shrink-0 w-2 h-[1.25em] bg-current"></i>
</span>

<script>
  const typingTexts = document.querySelectorAll(
    '[data-js="typing"]',
  ) as NodeListOf<HTMLElement>;

  typingTexts.forEach(typingText => {
    const textList = (
      typingText.getAttribute('data-js-typing-list') || ''
    ).split(',');
    const textElement = typingText.querySelector('[data-js-typing-input]');

    const createTypingEffect = (textArray: string[]) => {
      let textIndex = 0;
      let charIndex = 0;
      let direction = 'forward';

      const pauseEnd = 2000;
      const typeSpeed = 110;

      const startTyping = () => {
        const current = textArray[textIndex];

        if (current && textElement && direction === 'forward') {
          if (charIndex <= current.length) {
            const text = current.substring(0, charIndex);
            textElement.textContent = text;
            charIndex++;

            setTimeout(startTyping, typeSpeed);
          } else {
            typingText.classList.add('is-hidden');

            setTimeout(() => {
              typingText.classList.remove('is-hidden');
              charIndex = 0;
              textIndex = (textIndex + 1) % textArray.length;
              startTyping();
            }, pauseEnd);
          }
        }
      };

      startTyping();
    };

    createTypingEffect(textList);
  });
</script>

<style is:global>
  .typing-text.is-hidden {
    animation: slide-out theme('transitionDuration.500')
      theme('transitionTimingFunction.inOutQuart') 1s forwards;
  }

  @keyframes slide-out {
    0% {
      translate: 0 0 0;
      opacity: 1;
    }

    50% {
      opacity: 0;
    }

    100% {
      translate: 0 -100% 0;
      opacity: 0;
    }
  }

  .typing-text__caret {
    animation: caret-blink 1s steps(1) infinite;
  }

  @keyframes caret-blink {
    0%,
    100% {
      opacity: 0;
    }
    50% {
      opacity: 1;
    }
  }
</style>
