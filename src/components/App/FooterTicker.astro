---
import Icon from '@/components/Elements/Icon.astro'

const copy = ['Letâ€™s work together']
const multipleCopy: string[] = [...copy, ...copy, ...copy]
---

<script>
  let isVisible = false

  const tickers = [
    ...document.querySelectorAll('[data-js=app-footer-ticker]'),
  ] as HTMLElement[]

  tickers.forEach(ticker => {
    const callback = (entries: any) => {
      const [{ isIntersecting }] = entries

      isVisible = isIntersecting

      if (isVisible) {
        ticker?.classList.add('is-visible')
      } else {
        ticker?.classList.remove('is-visible')
      }
    }

    const options = {
      root: null,
      rootMargin: '0px 0px 0px 0px',
      threshold: 0,
    }

    const observer = new IntersectionObserver(callback, options)

    if (ticker) observer.observe(ticker)

    window.addEventListener('scroll', () => {
      ticker?.classList.add('is-scrolling')

      clearTimeout(window.scrollTimeout)
      window.scrollTimeout = setTimeout(() => {
        ticker.classList.remove('is-scrolling')
      }, 10)
    })
  })
</script>

<section
  data-js="app-footer-ticker"
  class="footer-ticker block w-full pt-100 pb-50"
>
  <div class="footer-ticker__outer wrapper-full">
    <div
      class="footer-ticker__inner bg-yellow text-navy py-[1.9em] md:py-[1.15em] rounded-[0.8em] font-heading text-fluid-h1 font-semibold contain-paint"
    >
      <div
        class="footer-ticker__words footer-ticker__words--left select-none flex gap-[var(--gap)] min-w-full relative -top-[0.1em]"
      >
        <div
          class="footer-ticker__group will-change-transform flex shrink-0 gap-[var(--gap)] items-center justify-around min-w-full"
        >
          {
            multipleCopy.map(text => (
              <p class="inline-flex gap-[var(--gap)] items-center">
                {text}

                <span class="relative top-[0.1em] bg-navy text-white shrink-0 size-[1em] flex items-center justify-center rounded-[0.3em]">
                  <Icon name="arrow-ne" class="block size-[0.2em]" />
                </span>
              </p>
            ))
          }
        </div>

        <div
          aria-hidden="true"
          class="footer-ticker__group will-change-transform flex shrink-0 gap-[var(--gap)] items-center justify-around min-w-full"
        >
          {
            multipleCopy.map(text => (
              <p class="inline-flex gap-[var(--gap)] items-center">
                {text}

                <span class="relative top-[0.1em] bg-navy text-white shrink-0 size-[1em] flex items-center justify-center rounded-[0.3em]">
                  <Icon name="arrow-ne" class="block size-[0.2em]" />
                </span>
              </p>
            ))
          }
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .footer-ticker__words {
    --duration: 60s;
    --gap: 0.5em;

    &--left {
      animation: auto linear scroll-left both;
      animation-play-state: paused;
      animation-timeline: view();

      animation-range: entry 0% cover 100%;
    }

    &--right {
      justify-content: flex-end;

      animation: auto linear scroll-right both;
      animation-play-state: paused;
      animation-timeline: view();

      animation-range: entry 0% cover 100%;
    }

    @media not (prefers-reduced-motion: reduce) {
      .footer-ticker.is-visible & {
        animation-play-state: running;
      }
    }
  }

  .footer-ticker__group {
    .footer-ticker__words--left & {
      animation: ticker-left var(--duration) linear infinite;
      animation-play-state: paused;
    }

    .footer-ticker__words--right & {
      animation: ticker-right var(--duration) linear infinite;
      animation-play-state: paused;
    }

    .footer-ticker.is-scrolling .footer-ticker__words--left & {
      animation-play-state: paused;
    }

    @media not (prefers-reduced-motion: reduce) {
      .footer-ticker.is-visible & {
        animation-play-state: running;
      }
    }
  }

  @keyframes scroll-left {
    from {
      translate: 0% 0 0;
    }

    to {
      translate: -25% 0 0;
    }
  }

  @keyframes scroll-right {
    from {
      translate: 0% 0 0;
    }

    to {
      translate: 25% 0 0;
    }
  }

  @keyframes ticker-left {
    0% {
      translate: 0 0 0;
    }

    100% {
      translate: calc(-100% - var(--gap)) 0 0;
    }
  }

  @keyframes ticker-right {
    0% {
      translate: 0 0 0;
    }

    100% {
      translate: calc(100% + var(--gap)) 0 0;
    }
  }
</style>
