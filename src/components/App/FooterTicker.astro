---
const copy = ["Letâ€™s work together"];
const multipleCopy: string[] = [...copy, ...copy, ...copy];
---

<script>
  let isVisible = false;
  const container = document.querySelector(".block-marquee");

  const callback = (entries: any) => {
    const [{ isIntersecting }] = entries;

    isVisible = isIntersecting;

    if (isVisible) {
      container?.classList.add("is-visible");
    } else {
      container?.classList.remove("is-visible");
    }
    console.log("isVisible:", isVisible);
  };

  const options = {
    root: null,
    rootMargin: "0px 0px 0px 0px",
    threshold: 0,
  };

  const observer = new IntersectionObserver(callback, options);

  if (container) observer.observe(container);
</script>

<section class:list={["block-marquee contain-paint block w-full py-200"]}>
  <div class="block-marquee__outer wrapper-full">
    <div
      class="block-marquee__inner bg-yellow text-navy py-[1.3em] rounded-[1em] font-heading text-fluid-h1 font-semibold"
    >
      <div
        class="block-marquee__words block-marquee__words--left select-none flex gap-[var(--gap)] min-w-full relative -top-[0.1em]"
      >
        <div
          class="block-marquee__group will-change-transform flex shrink-0 gap-[var(--gap)] items-center justify-around min-w-full"
        >
          {multipleCopy.map((text) => <p>{text}</p>)}
        </div>

        <div
          aria-hidden="true"
          class="block-marquee__group will-change-transform flex shrink-0 gap-[var(--gap)] items-center justify-around min-w-full"
        >
          {multipleCopy.map((text) => <p>{text}</p>)}
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .block-marquee__words {
    --duration: 60s;
    --gap: 1em;

    &--left {
      animation: auto linear scroll-left both;
      animation-play-state: paused;
      animation-timeline: view();

      animation-range: entry 0% cover 100%;
    }

    &--right {
      justify-content: flex-end;

      animation: auto linear scroll-right both;
      animation-play-state: paused;
      animation-timeline: view();

      animation-range: entry 0% cover 100%;
    }

    @media not (prefers-reduced-motion: reduce) {
      .block-marquee.is-visible & {
        animation-play-state: running;
      }
    }
  }

  .block-marquee__group {
    .block-marquee__words--left & {
      animation: ticker-left var(--duration) linear infinite;
      /* animation-play-state: paused; */
    }

    .block-marquee__words--right & {
      animation: ticker-right var(--duration) linear infinite;
      animation-play-state: paused;
    }

    @media not (prefers-reduced-motion: reduce) {
      .block-marquee.is-visible & {
        /* animation-play-state: running; */
      }
    }
  }

  @keyframes scroll-left {
    from {
      translate: 0% 0 0;
    }

    to {
      translate: -25% 0 0;
    }
  }

  @keyframes scroll-right {
    from {
      translate: 0% 0 0;
    }

    to {
      translate: 25% 0 0;
    }
  }

  @keyframes ticker-left {
    0% {
      translate: 0 0 0;
    }

    100% {
      translate: calc(-100% - var(--gap)) 0 0;
    }
  }

  @keyframes ticker-right {
    0% {
      translate: 0 0 0;
    }

    100% {
      translate: calc(100% + var(--gap)) 0 0;
    }
  }
</style>
