---
import AppHeaderLogo from '@/components/App/HeaderLogo.astro';
import AppHeaderButton from '@/components/App/HeaderButton.astro';
import AppHeaderNav from '@/components/App/HeaderNav.astro';
import ShapeRow from '@/components/Elements/ShapeRow.astro';

const navListOne: HeaderNavigationItem[] = [
  {
    text: 'Services',
    subMenu: [
      {
        heading: 'Web Services',
        items: [
          { text: 'WordPress Development', url: '/' },
          { text: 'UX/UI Design', url: '/' },
          { text: 'WooCommerce Development', url: '/' },
          { text: 'Laravel Development', url: '/' },
          { text: 'White Label Web Development', url: '/' },
          { text: 'eCommerce', url: '/' },
        ],
      },
      {
        heading: 'Other Services',
        items: [
          { text: 'SEO', url: '/' },
          { text: 'Paid Search', url: '/' },
          { text: 'Graphic Design', url: '/' },
        ],
      },
    ],
  },
  { text: 'Our Work', url: '/' },
  { text: 'Agency', url: '/' },
];

const navListTwo: HeaderNavigationItem[] = [
  { text: 'Guides', url: '/' },
  { text: 'Contact', url: '/' },
  {
    text: 'Work with us',
    url: '/',
    color: 'navy',
    type: 'alt',
  },
];
---

<script>
  import gsap from 'gsap';
  import { ScrollTrigger } from 'gsap/dist/ScrollTrigger';

  gsap.registerPlugin(ScrollTrigger);

  const header = document.querySelector('[data-js="header"]') as HTMLElement;
  const navs = document.querySelectorAll(
    '[data-js-header-nav]',
  ) as NodeListOf<HTMLElement>;

  if (header) {
    const sections = document.querySelectorAll(
      '[data-js-theme]',
    ) as NodeListOf<HTMLElement>;
    const halfHeaderHeight = header.clientHeight / 2;

    sections.forEach(section => {
      ScrollTrigger.create({
        markers: false,
        trigger: section,
        start: `top ${halfHeaderHeight}px`,
        end: `bottom ${halfHeaderHeight}px`,
        onToggle: ({ isActive }) => {
          const checkIfLightTheme =
            isActive && section.getAttribute('data-js-theme') === 'light';

          header.classList[checkIfLightTheme ? 'remove' : 'add'](
            'md:text-white',
          );
          header.classList[!checkIfLightTheme ? 'remove' : 'add'](
            'md:text-navy',
          );

          navs.forEach(nav => {
            nav.classList[checkIfLightTheme ? 'remove' : 'add'](
              'md:bg-offblack/10',
            );

            nav.classList[checkIfLightTheme ? 'remove' : 'add'](
              'md:border-white/10',
            );

            nav.classList[!checkIfLightTheme ? 'remove' : 'add'](
              'md:bg-grey-light/50',
            );
            nav.classList[!checkIfLightTheme ? 'remove' : 'add'](
              'md:border-grey-light/30',
            );
          });
        },
      });
    });

    const resizeObserver = new ResizeObserver(() => {
      requestAnimationFrame(() => {
        ScrollTrigger.refresh();
      });
    });

    const resizeTarget: HTMLBodyElement | any = document.querySelector('body');

    resizeObserver.observe(resizeTarget);

    //Menu
    const headerMenuButton = document.querySelector(
      '[data-js-header-menu-button]',
    ) as HTMLElement;
    const headerMenuButtonText = document.querySelector(
      '[data-js-header-menu-button-text]',
    ) as HTMLElement;
    const headerMenuCase = document.querySelector(
      '[data-js-header-menu-case]',
    ) as HTMLElement;

    headerMenuButton.addEventListener('click', () => {
      const isOpen = headerMenuButton.classList.toggle('is-open');
      header.classList.toggle('is-open');

      if (isOpen) {
        headerMenuButtonText.textContent = 'Close'; // Change text to "Close"
      } else {
        headerMenuButtonText.textContent = 'Menu'; // Change text back to "Menu"
      }

      if (isOpen) {
        gsap.to(headerMenuCase, {
          autoAlpha: 1,
          duration: 0.5,
          ease: 'power2.out',
        });
      } else {
        gsap.to(headerMenuCase, {
          autoAlpha: 0,
          duration: 0.25,
          ease: 'power2.out',
        });
      }
    });

    //SubMenus
    const navItems = document.querySelectorAll(
      '[data-js-header-nav-item]',
    ) as NodeListOf<HTMLElement>;

    navItems.forEach(item => {
      const itemButton = item.querySelector('[data-js-header-nav-item-button]');
      const itemSubMenu = item.querySelector(
        '[data-js-header-nav-item-submenu]',
      );
      const itemSubMenuBack = item.querySelector(
        '[data-js-header-nav-item-submenu-back]',
      );
      const itemSubMenuInner = item.querySelector(
        '[data-js-header-nav-item-submenu-inner]',
      );

      gsap.set(itemSubMenu, {
        x: 16,
        autoAlpha: 0,
      });

      let isAnimating = false;

      const openSubMenu = () => {
        if (isAnimating) return;

        item.classList.remove('relative');
        item.classList.remove('overflow-hidden');

        gsap.to(itemSubMenu, {
          x: 0,
          autoAlpha: 1,
          duration: 0.5,
          ease: 'power2.out',
        });

        gsap.to(headerMenuCase, {
          height: itemSubMenuInner.clientHeight + 2, // accounts for 1px border around scroll container
          duration: 0.5,
          ease: 'power2.out',
          onStart: () => {
            isAnimating = true;
          },
          onComplete: () => {
            isAnimating = false;
          },
        });
      };

      const closeSubMenu = () => {
        if (isAnimating) return;

        gsap.to(itemSubMenu, {
          x: 16,
          autoAlpha: 0,
          duration: 0.25,
          ease: 'power2.out',
        });

        gsap.to(headerMenuCase, {
          height: 'auto',
          duration: 0.5,
          ease: 'power2.out',
          onStart: () => {
            isAnimating = true;
          },
          onComplete: () => {
            isAnimating = false;
            item.classList.add('relative');
            item.classList.add('overflow-hidden');
          },
        });
      };

      if (itemButton && itemSubMenu && itemSubMenuInner) {
        itemButton.addEventListener('click', () => {
          const isOpen = itemButton.classList.toggle('is-subnav-open');

          if (isOpen) {
            openSubMenu();
          } else {
            closeSubMenu();
          }
        });

        itemSubMenuBack?.addEventListener('click', () => {
          closeSubMenu();

          itemButton.classList.remove('is-subnav-open');
        });
      }
    });
  }
</script>

<header
  data-js="header"
  class="header sticky top-0 z-50 p-12 md:p-18 pointer-events-none"
>
  <div class="flex justify-between md:hidden">
    <a
      class="inline-block bg-offblack/10 backdrop-blur-20 rounded-16 border border-white/10 p-3 transition-[background-color,border-color] duration-150 ease-smooth pointer-events-auto"
      href="/"
    >
      <AppHeaderLogo />
      <span class="sr-only">Home</span>
    </a>

    <div
      class="flex bg-offblack/10 backdrop-blur-20 rounded-16 border border-white/10 pointer-events-auto transition-[background-color,border-color] duration-150 ease-smooth"
    >
      <a class="block h-full p-3" href="/">
        <AppHeaderButton type="alt" color="navy">
          Work with us
        </AppHeaderButton>
      </a>

      <button data-js-header-menu-button type="button" class="h-full p-3">
        <AppHeaderButton type="alt" color="yellow">
          <span class="min-w-[38px]" data-js-header-menu-button-text>Menu</span>
        </AppHeaderButton>
      </button>
    </div>
  </div>

  <div class="header__outer">
    <div
      data-lenis-prevent
      data-js-header-menu-case
      class="header__inner mdMax:relative mdMax:bg-navy-light mdMax:border mdMax:border-white/10 pointer-events-auto"
    >
      <div class="mdMax:-m-12 md:flex md:justify-between">
        <AppHeaderNav data-js-header-nav hasLogo items={navListOne} />
        <AppHeaderNav data-js-header-nav items={navListTwo} />
      </div>

      <div
        class="mt-60 flex flex-col gap-20 font-heading font-bold text-11 md:hidden"
      >
        <a href="/" class="block w-fit p-12 -m-12">
          <ShapeRow />
          <span class="sr-only">Home</span>
        </a>

        <div class="flex flex-col gap-16 mt-10 opacity-50">
          <a href="tel:+442080493080" class="block p-12 -m-12">020 8049 3080</a>

          <a href="mailto:hello@weareyellowball.com" class="block p-12 -m-12">
            hello@weareyellowball.com
          </a>
        </div>
      </div>
    </div>
  </div>
</header>

<style is:global>
  .header__outer {
    @media screen(mdMax) {
      position: absolute;
      top: var(--header-height);
      left: 0;
      width: 100%;
      height: calc(100vh - var(--header-height));
      padding: 12px;
      padding-top: 0;
    }
  }

  .header__inner {
    @media screen(mdMax) {
      padding: 40px;
      border-radius: 16px;
      width: 100%;
      max-height: 100%;
      overflow-y: auto;
      overscroll-behavior-y: contain;
    }
  }
</style>
