---
interface Props {
  class?: string;
  type?: 'transparent' | 'navy' | 'yellow';
  text: string;
  hasSubmenu?: boolean;
}

const {
  class: className,
  text,
  type = 'transparent',
  hasSubmenu = false,
  ...rest
} = Astro.props as Props;
---

<span
  class:list={[
    'app-header-link',
    'flex items-center gap-8 h-inherit px-20 rounded-12',
    'font-heading text-16 md:text-13 lg:text-15 font-bold',
    `is-${type}`,
    className,
  ]}
  {...rest}
>
  {
    hasSubmenu && (
      <span
        class:list={[
          'relative shrink-0 size-10',
          'before:absolute before:top-1/2 before:left-1/2 before:-translate-x-1/2 before:-translate-y-1/2 before:w-inherit before:h-2 before:bg-current',
          'after:absolute after:top-1/2 after:left-1/2 after:-translate-x-1/2 after:-translate-y-1/2 after:w-inherit after:h-2 after:bg-current after:rotate-90',
        ]}
      />
    )
  }
  {text}
</span>

<style>
  .app-header-link {
    --button-bg-color: theme('colors.transparent');
    --button-text-color: currentColor;

    position: relative;
    background-color: var(--button-bg-color);
    color: var(--button-text-color);
    transition:
      color theme('transitionDuration.200')
        theme('transitionTimingFunction.smooth'),
      background-color theme('transitionDuration.200')
        theme('transitionTimingFunction.smooth');

    &::after {
      content: '';
      position: absolute;
      inset: 0;
      background-color: theme('colors.navy');
      opacity: 0;
      border-radius: inherit;
      transition: opacity theme('transitionDuration.200')
        theme('transitionTimingFunction.smooth');
    }

    &.is-transparent {
      --button-bg-color: theme('colors.transparent');
      --button-text-color: currentColor;

      @media screen(md) {
        @media (hover: hover) {
          :global(a):hover &,
          :global(button):not(:disabled):hover & {
            --button-bg-color: transparent;
            --button-text-color: theme('colors.navy');
          }
        }
      }
    }

    &.is-navy {
      --button-bg-color: theme('colors.navy');
      --button-text-color: theme('colors.white');
    }

    &.is-yellow {
      --button-bg-color: theme('colors.yellow');
      --button-text-color: theme('colors.navy');
    }

    @media screen(md) {
      @media (hover: hover) {
        :global(a):hover &,
        :global(button):not(:disabled):hover & {
          --button-bg-color: theme('colors.yellow');
          --button-text-color: theme('colors.navy');
        }
      }
    }

    :global(a):active &,
    :global(button):not(:disabled):active & {
      &::after {
        opacity: 0.1;
      }
    }
  }
</style>
